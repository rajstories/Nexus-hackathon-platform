name: Deploy to Azure App Service

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: fusion-x-app  # Change this to your app name
  AZURE_WEBAPP_PACKAGE_PATH: '.'
  NODE_VERSION: '18.x'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test -- --passWithNoTests
        env:
          CI: true

      - name: Build Next.js application
        run: npm run build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
          NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}
          NEXT_PUBLIC_FIREBASE_APP_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}

      - name: Create deployment package
        run: |
          # Copy standalone build output
          cp -r .next/standalone/* ./deploy/
          cp -r .next/static ./deploy/.next/
          cp -r public ./deploy/
          
          # Copy server files
          cp server.js ./deploy/
          cp -r server ./deploy/
          cp -r shared ./deploy/
          
          # Create package.json for production
          node -e "
          const pkg = require('./package.json');
          const prodPkg = {
            name: pkg.name,
            version: pkg.version,
            scripts: {
              start: 'node server.js'
            },
            dependencies: {
              ...pkg.dependencies,
              'next': pkg.dependencies.next
            }
          };
          require('fs').writeFileSync('./deploy/package.json', JSON.stringify(prodPkg, null, 2));
          "

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: node-app
          path: ./deploy

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: node-app
          path: .

      # Option 1: Deploy using Publish Profile (recommended for simplicity)
      - name: Deploy to Azure Web App (Publish Profile)
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: .

      # Option 2: Deploy using OIDC (more secure, requires Azure AD setup)
      # Uncomment below and comment out the Publish Profile deployment above
      
      # - name: Login to Azure
      #   uses: azure/login@v1
      #   with:
      #     client-id: ${{ secrets.AZURE_CLIENT_ID }}
      #     tenant-id: ${{ secrets.AZURE_TENANT_ID }}
      #     subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      # - name: Deploy to Azure Web App (OIDC)
      #   uses: azure/webapps-deploy@v2
      #   with:
      #     app-name: ${{ env.AZURE_WEBAPP_NAME }}
      #     package: .
      
      # - name: Logout from Azure
      #   run: az logout

  verify:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Wait for deployment
        run: sleep 60

      - name: Health check
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/health)
          if [ $response -eq 200 ]; then
            echo "‚úÖ Health check passed"
          else
            echo "‚ùå Health check failed with status code: $response"
            exit 1
          fi

      - name: API check
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/api/health)
          if [ $response -eq 200 ]; then
            echo "‚úÖ API health check passed"
          else
            echo "‚ùå API health check failed with status code: $response"
            exit 1
          fi

      - name: WebSocket check
        run: |
          # Basic WebSocket connectivity test
          timeout 5 curl -i -N \
            -H "Connection: Upgrade" \
            -H "Upgrade: websocket" \
            -H "Sec-WebSocket-Version: 13" \
            -H "Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==" \
            https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/socket.io/ || true
          echo "‚úÖ WebSocket endpoint responsive"

      - name: Deployment summary
        run: |
          echo "üöÄ Deployment successful!"
          echo "üìç URL: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
          echo "üîå WebSocket: wss://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
          echo "üè• Health: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/health"
          echo "üîß API: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/api/health"